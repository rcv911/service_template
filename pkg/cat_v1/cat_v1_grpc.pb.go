// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: cat_v1/cat_v1.proto

package cat_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatService_Pet_FullMethodName      = "/cat_v1.CatService/Pet"
	CatService_Feed_FullMethodName     = "/cat_v1.CatService/Feed"
	CatService_OpenDoor_FullMethodName = "/cat_v1.CatService/OpenDoor"
)

// CatServiceClient is the client API for CatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для котов: отвечает на типичные "запросы" котиков
type CatServiceClient interface {
	// Реакция на поглаживание
	Pet(ctx context.Context, in *PetRequest, opts ...grpc.CallOption) (*PetResponse, error)
	// Покормить котика. Отвечает, доволен он или нет
	Feed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	// Открыть дверь для кота (и через 3 секунды повторить)
	OpenDoor(ctx context.Context, in *OpenDoorRequest, opts ...grpc.CallOption) (*OpenDoorResponse, error)
}

type catServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatServiceClient(cc grpc.ClientConnInterface) CatServiceClient {
	return &catServiceClient{cc}
}

func (c *catServiceClient) Pet(ctx context.Context, in *PetRequest, opts ...grpc.CallOption) (*PetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PetResponse)
	err := c.cc.Invoke(ctx, CatService_Pet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) Feed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, CatService_Feed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catServiceClient) OpenDoor(ctx context.Context, in *OpenDoorRequest, opts ...grpc.CallOption) (*OpenDoorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenDoorResponse)
	err := c.cc.Invoke(ctx, CatService_OpenDoor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatServiceServer is the server API for CatService service.
// All implementations must embed UnimplementedCatServiceServer
// for forward compatibility.
//
// Сервис для котов: отвечает на типичные "запросы" котиков
type CatServiceServer interface {
	// Реакция на поглаживание
	Pet(context.Context, *PetRequest) (*PetResponse, error)
	// Покормить котика. Отвечает, доволен он или нет
	Feed(context.Context, *FeedRequest) (*FeedResponse, error)
	// Открыть дверь для кота (и через 3 секунды повторить)
	OpenDoor(context.Context, *OpenDoorRequest) (*OpenDoorResponse, error)
	mustEmbedUnimplementedCatServiceServer()
}

// UnimplementedCatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatServiceServer struct{}

func (UnimplementedCatServiceServer) Pet(context.Context, *PetRequest) (*PetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pet not implemented")
}
func (UnimplementedCatServiceServer) Feed(context.Context, *FeedRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedCatServiceServer) OpenDoor(context.Context, *OpenDoorRequest) (*OpenDoorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDoor not implemented")
}
func (UnimplementedCatServiceServer) mustEmbedUnimplementedCatServiceServer() {}
func (UnimplementedCatServiceServer) testEmbeddedByValue()                    {}

// UnsafeCatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatServiceServer will
// result in compilation errors.
type UnsafeCatServiceServer interface {
	mustEmbedUnimplementedCatServiceServer()
}

func RegisterCatServiceServer(s grpc.ServiceRegistrar, srv CatServiceServer) {
	// If the following call pancis, it indicates UnimplementedCatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatService_ServiceDesc, srv)
}

func _CatService_Pet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).Pet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_Pet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).Pet(ctx, req.(*PetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_Feed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).Feed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatService_OpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDoorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServiceServer).OpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatService_OpenDoor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServiceServer).OpenDoor(ctx, req.(*OpenDoorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatService_ServiceDesc is the grpc.ServiceDesc for CatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cat_v1.CatService",
	HandlerType: (*CatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pet",
			Handler:    _CatService_Pet_Handler,
		},
		{
			MethodName: "Feed",
			Handler:    _CatService_Feed_Handler,
		},
		{
			MethodName: "OpenDoor",
			Handler:    _CatService_OpenDoor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cat_v1/cat_v1.proto",
}
